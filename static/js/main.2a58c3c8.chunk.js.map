{"version":3,"sources":["action/GetImages.js","components/Loading/Loading.js","components/ListImages/ListImages.js","components/Drawer/Drawer.js","assets/constant.js","App.js","reportWebVitals.js","sagas/RootSaga.js","reducer/ImageReducer.js","reducer/reducer.js","index.js"],"names":["getImages","id","limit","type","Loading","loading","style","textAlign","connect","state","ImageReducer","ListImages","props","images","className","map","img","key","effect","src","url","alt","categories","name","height","width","Button","onClick","categoryID","mapDispatchToProps","Drawer","catID","useState","setCategories","useEffect","axios","get","then","res","data","Grid","columns","Column","Sidebar","Pushable","as","Segment","Menu","animation","icon","inverted","vertical","visible","cat","Item","Pusher","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","fetchImages","actionWatcher","rootSaga","action","put","json","takeLatest","all","allReducers","combineReducers","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2a58c3c8.chunk.js","sourcesContent":["/*get image action to dispatch action of type GET_IMAGES which will be captured by reducer and saga with id and limit\r\nproperties for to pass additional data with action*/\r\n\r\nexport const getImages = (id = 1, limit = 10) => ({\r\n  type: \"GET_IMAGES\",\r\n  id: id,\r\n  limit: limit,\r\n});\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\n/*\r\nLoading component to show loading message to indicate user that images are currently loading and it will render \r\non loading set to true or false condition that is again coming from reducer as it receives the action the condition \r\nwill be set to true and as the saga will dispatch next action on that condition will be set to false as images are \r\nloaded now.\r\n*/\r\nlet Loading = ({ loading }) =>\r\n  loading ? (\r\n    <div style={{ textAlign: \"center\" }}>\r\n      <h1>LOADING...</h1>\r\n    </div>\r\n  ) : null;\r\nconst mapStateToProps = (state) => ({ loading: state.ImageReducer.loading });\r\nLoading = connect(mapStateToProps, null)(Loading);\r\nexport default Loading;\r\n","import { connect } from \"react-redux\";\r\nimport { LazyLoadImage } from \"react-lazy-load-image-component\";\r\nimport { getImages } from \"../../action/GetImages\";\r\nimport \"./ListImages.scss\";\r\nimport { Button } from \"semantic-ui-react\";\r\n\r\n/*\r\nComponent for Listing Images and state mapped to redux store to get images from http call in saga and\r\nto dispatch new action as load more button is clicked will change the limit in api and append the result to our dom \r\n\r\nLazyload Image component is used to load images according to the viewport currently viewing\r\n*/\r\nlet ListImages = (props) => {\r\n  let limit = props.limit;\r\n  return props.images ? (\r\n    <div className=\"right_align\">\r\n      {props.images.map((img, key) => (\r\n        <LazyLoadImage\r\n          effect=\"blur\"\r\n          src={img.url}\r\n          key={key}\r\n          alt={img.categories[0].name}\r\n          height=\"500px\"\r\n          width=\"600px\"\r\n        />\r\n      ))}\r\n      <Button onClick={() => props.getImages(props.categoryID, (limit += 10))}>\r\n        Load More Images\r\n      </Button>\r\n    </div>\r\n  ) : (\r\n    <div className=\"pusherHeightWidth\"></div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  getImages: getImages,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  images: state.ImageReducer.images,\r\n  limit: state.ImageReducer.limit,\r\n});\r\n\r\nListImages = connect(mapStateToProps, mapDispatchToProps)(ListImages);\r\nexport default ListImages;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Grid, Menu, Segment, Sidebar } from \"semantic-ui-react\";\r\nimport { getImages } from \"../../action/GetImages\";\r\nimport Loading from \"../Loading/Loading\";\r\nimport ListImages from \"../ListImages/ListImages\";\r\nimport axios from \"axios\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./Drawer.scss\";\r\nimport { CATEGORY_URL } from \"../../assets/constant\";\r\n\r\n/*\r\nDrawer Component\r\n\r\nIs sidebar component to dynamically display categories by mapping over them and generating elements for each\r\nand with every element there is one event listner attached so that on click that category it will dispatch action\r\nand will pass unique category id which is used to fetch specific ategory data in saga by appending the id to constant \r\npart of url after that on loading condition in pusher segment either the loader component will render or List of Images \r\nwill render\r\n*/\r\n\r\nlet Drawer = (props) => {\r\n  const [categories, setCategories] = useState();\r\n  let catID;\r\n  const getImages = (id) => {\r\n    props.getImages(id);\r\n  };\r\n\r\n  const getCategories = () =>\r\n    axios.get(CATEGORY_URL).then((res) => setCategories(res.data));\r\n\r\n  useEffect(() => getCategories(), []);\r\n\r\n  const visiblity = true;\r\n  return (\r\n    <Grid columns={1}>\r\n      <Grid.Column>\r\n        <Sidebar.Pushable as={Segment}>\r\n          <Sidebar\r\n            as={Menu}\r\n            animation=\"overlay\"\r\n            icon=\"labeled\"\r\n            inverted\r\n            vertical\r\n            visible={visiblity}\r\n            width=\"thin\"\r\n          >\r\n            {categories?.map((cat, key) => {\r\n              catID = cat.id;\r\n              return (\r\n                <Menu.Item key={key} as=\"a\" onClick={() => getImages(cat.id)}>\r\n                  {cat.name}\r\n                </Menu.Item>\r\n              );\r\n            })}\r\n          </Sidebar>\r\n          <Sidebar.Pusher>\r\n            <Loading />\r\n            <ListImages categoryID={catID} />\r\n          </Sidebar.Pusher>\r\n        </Sidebar.Pushable>\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  getImages: getImages,\r\n};\r\n\r\nDrawer = connect(null, mapDispatchToProps)(Drawer);\r\n\r\nexport default Drawer;\r\n","/*contants file is used to declare constant variables that can be used in multiple components without decalring\r\nand defining again*/\r\n\r\nexport const SWITCH_CATEGORY = \"SWITCH_CATEGORY\";\r\nexport const API_URL = \"https://api.thecatapi.com/v1/images/search?\";\r\nexport const CATEGORY_URL = \"https://api.thecatapi.com/v1/categories\";\r\n","import \"./App.css\";\r\nimport Drawer from \"./components/Drawer/Drawer\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Drawer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","/* The saga or as we call it middleware it is used to do all asynchronous operations and mutate the state according\r\nto the result of asynchronous operations by dispatching new action and again will be handled by reducer and state will\r\nbe mutated*/\r\n\r\nimport { put, takeLatest, all } from \"redux-saga/effects\";\r\nimport { API_URL } from \"../assets/constant\";\r\nimport axios from \"axios\";\r\n\r\nfunction* fetchImages(action) {\r\n  const res = yield axios\r\n    .get(`${API_URL}limit=${action.limit}&category_ids=${action.id}`)\r\n    .then((res) => res);\r\n  yield put({ type: \"IMAGES_RECEIVED\", json: res.data, limit: action.limit });\r\n}\r\nfunction* actionWatcher() {\r\n  yield takeLatest(\"GET_IMAGES\", fetchImages);\r\n}\r\nexport default function* rootSaga() {\r\n  yield all([actionWatcher()]);\r\n}\r\n","// This reducer will perform state mutations based on action that is dispatched from action and sag\r\nconst ImageReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case \"GET_IMAGES\":\r\n      return { ...state, loading: true };\r\n    case \"IMAGES_RECEIVED\":\r\n      return {\r\n        ...state,\r\n        images: action.json,\r\n        loading: false,\r\n        limit: action.limit,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default ImageReducer;\r\n","//if we have multiple reducers than we can combine them into one file by this combineReducers method\r\n\r\nimport { combineReducers } from \"redux\";\r\nimport ImageReducer from \"./ImageReducer\";\r\n\r\nconst allReducers = combineReducers({\r\n  ImageReducer,\r\n});\r\n\r\nexport default allReducers;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport rootSaga from \"./sagas/RootSaga\";\r\nimport { Provider } from \"react-redux\";\r\nimport allReducers from \"./reducer/reducer\";\r\n\r\n/*\r\nIndex Js\r\n\r\nwill initialize whole application with store and saga as middleware applied so that all the components can access share\r\nthis reducer state\r\n*/\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = createStore(allReducers, applyMiddleware(sagaMiddleware));\r\nsagaMiddleware.run(rootSaga);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nif (module.hot) {\r\n  module.hot.accept(App);\r\n}\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}